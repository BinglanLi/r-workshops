# try to execute the following code with the shortcut
mean(c(1,2,3))
x = 1.12321543
y <- 2
= 1.12321543
x = 1.12321543
y <- 2
x = 1.12321543
y <- 2
1 + pi + sin(42)
1 + pi + sin(42)
x
y
1 + pi +
sin(42)
5 + 2
28 %% 3
3^2
5 + 4 * 4 + 4 ^ 4 / 10
weight_kg <- 55
weight_kg
2.2 * weight_kg
weight_kg <- 57.5
2.2 * weight_kg
weight_lb <- 2.2 * weight_kg
weight_lb
weight_kg <- 100
weight_kg
weight_kg * 2.2
weight_lb
ls()
rm(weight_lb, weight_kg)
ls()
weight_lb # oops! you should get an error because weight_lb no longer exists!
pi
pi <- 3.14
pi
rm(pi)
pi2 <- 3.14
help(print)
help('print')
?print
vector1 <- c(1, 5, 8.4, -6, 2)                  #Numeric
vector2 <- c(TRUE, TRUE, FALSE, NA, FALSE)      #Logical
vector3 <- c("first", "second", "third", "fourth", "fifth")        #Character
# create a sequence by concatenating two other sequences
vector4 <- c("sixth", "seventh")
vector5 <- c(vector3, vector4)
vector5
vector1
vector3
vector6 <- c(vector1, vector3)
vector6
class(vector1)
vector1
vector1[3]
vector1[c(2,4)]
vector1[1:2]
vector1[1:]
x <- 1:10
x
x + 2
x + x
x <- 1:10
x
y <- c(1,2)
y
x * y
x <- 1:10
y <- c(2,3,4)
x
y
x * y
# create a numeric vector
x <- 1:10
# testing whether x > 5 creates a logical vector
x > 5
# store the logical operation output to a variable
x_gt_5 <- (x > 5)
x_gt_5
class(x_gt_5)
x <- list(vector1, vector2, vector3, 8)
x
slice <- x[2]        #slicing
class(slice)
ref <- x[[2]]      #referencing
class(ref)
x <- 1:10
y <- rnorm(10)
# make a matrix by column binding two numeric vectors
mat <- cbind(x,y)
mat
rownames(mat)
colnames(mat)
data <- c(2, 4, 3, 1, 5, 7)
rnames <- c("row1", "row2")
cnames <- c("col1", "col2", "col3")
mymatrix <- matrix(data, nrow = 2, ncol = 3, byrow = FALSE, dimnames = list(rnames, cnames))
mymatrix
# the 1st ROW
mymatrix[1,]
# and all elements of mat that are > 4; note no comma
mat[mat>4]
df <- data.frame(vector1, vector2, vector3)
df
fhs_data <- read.csv("Framingham.dat")
fhs_data
?read.csv
head(fhs_data)
tail(fhs_data)
dim(fhs_data)
nrow(fhs_data)
ncol(fhs_data)
colnames(fhs_data)
summary(fhs_data)
str(fhs_data)
View(fhs_data)
head(fhs_data$SBP)
typeof(fhs_data$SBP)
class(fhs_data$SBP)
str(fhs_data$SBP)
head(fhs_data[fhs_data$SBP >= 130, ])
# subset people with high blood pressure
fhs_high_bp <- fhs_data[fhs_data$SBP >= 130 & fhs_data$DBP >= 80, ]
fhs_high_bp
# save one or more object to RData
save(fhs_high_bp, fhs_data, file = "framingham_high_blood_pressure.RData")
# to load an RData file
ls()
load("framingham_high_blood_pressure.RData")
ls()
x<-1:9
length(x)
# a simple conditional then two expressions
if (length(x)<=10) {
x <- c(x,10:20)
print(x)
}
for (i in x) print(i)
for (i in x) i
# loop over a character vector
y<-c('a','b','hi there')
for (single_element in y){
print(single_element)
}
calc_sum_squares <- function(a_vector){
# this function calculates the sum of the square of variation
# same as "sum( (x - mean(x) )^2 )"
# if not a numeric vector, stop
if(class(a_vector) != "numeric"){
stop("Vector is not numeric!!!")
}
# calculate the sum of the square
vec_mean <- mean(a_vector, na.rm = TRUE)
vec_ss <- sum( (a_vector - vec_mean )^2 )
# return the sum of the square
vec_ss
}
vector1 <- c(1, 5, 8.4, -6, 2)                  #Numeric
vector2 <- c(TRUE, TRUE, FALSE, NA, FALSE)      #Logical
vector3 <- c("first", "second", "third", "fourth", "fifth")        #Character
# test
vector1
vector3
calc_sum_squares(vector1)
calc_sum_squares(vector3)
# default function to draw histogram
hist(fhs_data$DBP) # histogram of the diastolic blood pressure
hist(scale(fhs_data$DBP))
fhs_clean <- fhs_data[complete.cases(fhs_data),] # subset 'fhs_data', including only complete rows
fhs_clean %>%
gather(key=variable, value=value, c(AGE, SBP, DBP, CHOL, FRW)) %>%
ggplot(., aes(x=value)) +
geom_histogram() +
theme_classic(base_size=15) +
facet_wrap(~ variable, scales="free_x")
library(tidyr)
fhs_clean %>%
gather(key=variable, value=value, c(AGE, SBP, DBP, CHOL, FRW)) %>%
ggplot(., aes(x=value)) +
geom_histogram() +
theme_classic(base_size=15) +
facet_wrap(~ variable, scales="free_x")
library(ggplot2)
fhs_clean %>%
gather(key=variable, value=value, c(AGE, SBP, DBP, CHOL, FRW)) %>%
ggplot(., aes(x=value)) +
geom_histogram() +
theme_classic(base_size=15) +
facet_wrap(~ variable, scales="free_x")
# you can also save the ggplot2 object to a variable
p_fhs <- fhs_clean %>%
gather(key=variable, value=value, c(AGE, SBP, DBP, CHOL, FRW)) %>%
ggplot(., aes(x=value)) +
geom_histogram() +
theme_classic(base_size=15) +
facet_wrap(~ variable, scales="free_x")
# this ggplot2 figure can be reused
p_fhs
p_fhs + labs(x = "Measures", y = "Counts")
p_fhs
